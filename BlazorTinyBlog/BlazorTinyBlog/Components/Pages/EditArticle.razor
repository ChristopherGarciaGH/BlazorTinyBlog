@page "/edit-article"
@page "/edit-article/{Id:int}"
@inject DataContext Context
@inject NavigationManager NavigationManager
@* @attribute [StreamRendering] *@
@rendermode InteractiveServer

@if (Id is null)
{
    <PageTitle>Create a New Article</PageTitle>
    <h3>Create a New Article</h3>
}
else if(Post is not null)
{
    <PageTitle>Edit "@Post.Title"</PageTitle>
    <h3>Edit "@Post.Title"</h3>
}

@if (Post is not null)
{
    <EditForm Model="Post" OnSubmit="HandleSubmit">
        <div>
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="Post.Title" class="form-control" />
        </div>

        <div>
            <label for="publisedDate">Date</label>
            <InputDate id="publisedDate" @bind-Value="Post.PublisedDate" class="form-control" />
        </div>

        <div>
            <label for="content">Content</label>
            <InputTextArea id="content" @bind-Value="Post.Content" class="form-control" />
        </div>

        <div>
            <InputCheckbox id="isPublished" @bind-Value="Post.IsPublished" class="form-check-input" />
            <label for="isPublished">Published</label>
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

<p>@status</p>

<p>
    Danger Zone!
    <br />
        <button class="btn btn-danger" @onclick="DeleteArticle">Delete Post</button>
        <!--La etiqueta AntiforgeryToken mecanismo de seguridad utilizado para prevenir ataques CSRF
        (Cross-Site Request Forgery, o falsificación de petición en sitios cruzados)-->
        @* <AntiforgeryToken></AntiforgeryToken> *@
</p>

@code {
    [Parameter]
    public int? Id { get; set; }

    string status = string.Empty;

    /*
    * Enlaza la interfaz de nuestro formulario con la logica
    * del componente.
    */
    // [SupplyParameterFromForm]
    BlogPost? Post { get; set; }

    /*
    * Este metodo desencadena el ciclo de vida del componente y carga
    * los datos relevantes del post en la interfaz.
    */
    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await Context.BlogPosts.FindAsync(Id);
            if (result is not null)
            {
                Post = result;
            }
        }
        else
        {
            Post = new();
        }
    }

    /*
    * Maneja el evento del formulario de edición o creacion
    * hace uso del metodo UpdateArticle() para editar
    * y CreateArticle() para crear un nuevo post.
    */
    async Task HandleSubmit()
    {
        if(Id is not null)
        {
            await UpdateArticle();
        }
        else
        {
            await CreateArticle();
        }
    }

    /*
    * Utiliza operaciones asincronas para crear
    * un nuevo post, utiliza Context.BlogPosts.Add
    * para crear un nuevo post almacenando el post
    * del formulario.
    */
    async Task CreateArticle()
    {
        if(Post is null)
        {
            return;
        }
        Context.BlogPosts.Add(Post);
        var result = await Context.SaveChangesAsync();

        if (result == 1)
        {
            status = "Article has been created!";
        }
        else
        {
            status = "Article has NOT been created!";
        }
    }

    /*
    * Este metodo edita los articulos del blog, utiliza
    * operaciones asincronas para asegurar que los cambios
    * se guarden en la base de datos de forma segura y eficiente.
    * 
    * Nos traemos de base de datos el post por su id y si la variable
    * dbArticle no es null y el Post no es null procedemos a actualizar
    * el post.
    */
    async Task UpdateArticle()
    {
        var dbArticle = await Context.BlogPosts.FindAsync(Id);

        if(dbArticle is not null && Post is not null)
        {
            dbArticle.Title = Post.Title;
            dbArticle.PublisedDate = Post.PublisedDate;
            dbArticle.Content = Post.Content;
            dbArticle.IsPublished = Post.IsPublished;

            var result = await Context.SaveChangesAsync();

            if(result == 1)
            {
                status = "Article has been updated!";
            }
            else
            {
                status = "Article has NOT been update!";
            }
        }
    }

    /*
     * Este metodo elimina de forma asincrona el post
     * primeramente buscamos el post por su Id, despues
     * borramos con .Remove y guardamos en base de datos.
     */
    async Task DeleteArticle()
    {
        var dbArticle = await Context.BlogPosts.FindAsync(Id);

        if (dbArticle is not null)
        {
            Context.BlogPosts.Remove(dbArticle);
            await Context.SaveChangesAsync();
            NavigationManager.NavigateTo("/blog");
        }
    }
}
